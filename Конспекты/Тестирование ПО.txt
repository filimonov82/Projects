1. Основы тестирования. -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.1 Почему тестирование необходимо
Просчет - ошибка программиста, которая приводит к дефекту.
Дефект - недочет в программном коде, который заставляет его работать не так, как ожидается.
Отказ - возможная реакция программного обеспечения на попытку запуститься с дефектами, при которой ПО ломается так или иначе.

Тестирование необходимо для выявляения дефектов до того, как система будет передана в эксплуатацию, чтобы повысить ее качество.

Тестирование - это возможный способ оценки качества программного обеспечения в терминах найденных дефектов, как для 
функциональных требований, так и для нефункциональных требований и характеристик программного обеспечения 
(например, надежность, практичность, эффективность, сопровождаемость и переносимость).

Хорошо разработанный тест, если он успешно пройден, снижает общий уровень риска в системе.

Для принятия решения о достаточном объеме тестирования, необходимо принимать во внимание уровень рисков, включая технические риски, 
риски безопасности и бизнес риски, а так же проектные ограничения, такие как время и бюджет.

Тестирование должно предоставить достаточную информацию заинтересованным лицам, чтобы принять обоснованные решения о 
передаче программного обеспечения или системы, прошедшей тестирование, на следующий шаг разработки или передачи клиентам.


1.2 Что есть тестирование.---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Активности в тестировании существуют как до, так и после выполнения самих тестов. В эти активности входят планирование и
управление, выбор тестовых условий, разработка и выполнение тестовых сценариев, проверка результатов, оценка критериев
выхода, создание отчетов о процессе тестирования и об испытываемой системе и закрытие или завершающие действия после того,
как фаза тестирования была выполнена. Тестирование также включает рецензирование документации (включая исходный код) и
проведение статического анализа.

Статическое тестирование – тип тестирования, который предполагает, что программный код во время тестирования не будет выполняться. При этом само тестирование может быть как ручным, так и автоматизированным.
Виды статического тестирования:
– вычитка исходного кода программы;
– проверка требований.

Динамическое тестирование – тип тестирования, который предполагает запуск программного кода. Таким образом, анализируется поведение программы во время ее работы.
Динамическое тестирование является частью процесса валидации программного обеспечения.
Кроме того динамическое тестирование может включать разные подвиды, каждый из которых зависит от:
• Доступа к коду (тестирование черным, белым и серым ящиками).
• Уровня тестирования (модульное интеграционное, системное, и  приемочное тестирование).
• Сферы использования приложения (функциональное, нагрузочное, тестирование безопасности и пр.).

И динамическое и статическое тестирование используются для достижения аналогичных целей, предоставляя информацию,
которая может способствовать улучшению как испытываемой системы, так и процессов разработки и тестирования.



Цели тестирования:
• Обнаружение дефектов
• Повышение уверенности в уровне качества
• Предоставление информации для принятия решений
• Предотвращение дефектов

Цели процессов и действия, связанные с проектированием тестов на раннем этапе жизненного цикла программного обеспечения
(например, при компонентном, интеграционном и системном тестировании), могут помочь предотвратить попадание дефектов в код.
Рецензирование документов (например, требований), идентификация и разрешение проблем также помогают предотвратить появление дефектов в коде.



Разные точки зрения в тестировании преследуют разные цели. Например, в тестировании на этапе разработки (таком, как
компонентное, интеграционное и системное тестирование), основная цель может заключаться в том, чтобы вызвать как можно
больше отказов, чтобы дефекты в программном обеспечении были идентифицированы и могли быть исправлены. В приемочном
тестировании основная цель может состоять в том, чтобы подтвердить, что система работает, как ожидалось и повысить
уверенность в том, что она удовлетворяет требованиям. В некоторых случаях основная цель тестирования может состоять в том,
чтобы оценить качество программного обеспечения (без намерения исправлять дефекты) и дать информацию заинтересованным лицам
о рисках выпуска системы в установленный срок.

Тестирование в период сопровождения в основном заключается в проверке отсутствия новых дефектов, которые могли попасть во
время разработки изменений. Во время эксплуатационного тестирования основная цель может заключаться в том, чтобы оценить
системные характеристики, такие как надежность или доступность.



Стоит различать отладку и тестирование. Динамическое тестирование может выявить отказы, вызванные дефектами. Отладка – это
действия разработчиков, которые находят, анализируют и устраняют причину отказа. Повторное тестирование гарантирует, что
изменение действительно предотвращает отказ.

Ответственность за тестирование обычно несут тестировщики, а за отладку - разработчики.

1.3 Семь принципов тестирования----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Принцип 1 - Тестирование демонстрирует наличие дефектов.
Тестирование может показать, что дефекты присутствуют, но не может доказать, что их нет.
Тестирование снижает вероятность наличия дефектов, находящихся в программном обеспечении, но, даже если дефекты не были обнаружены, это не доказывает его корректности.

Принцип 2 – Исчерпывающее тестирование недостижимо.
Полное тестирование с использованием всех комбинаций вводов и предусловий физически невыполнимо, за исключением
тривиальных случаев. Вместо исчерпывающего тестирования должны использоваться анализ рисков и расстановка приоритетов,
чтобы более точно сфокусировать усилия по тестированию.

Принцип 3 – Раннее тестирование.
Чтобы найти дефекты как можно раньше, действия по тестированию должны быть начаты как можно раньше в жизненном цикле
разработки программного обеспечения или системы, и должны быть сфокусированы на определенных целях.

Принцип 4 – Скопление дефектов.
Усилия тестирования должны быть сосредоточены пропорционально ожидаемой, а позже реальной плотности дефектов по
модулям. Как правило, большая часть дефектов, обнаруженных при тестировании или повлекших за собой основное количество
сбоев системы, содержится в небольшом количестве модулей (в самых сложных функциях ПО, например).

Принцип 5 – Парадокс пестицида.
Если одни и те же тесты будут прогоняться много раз, в конечном счете этот набор тестовых сценариев больше не будет находить
новых дефектов. Чтобы преодолеть этот “парадокс пестицида”, тестовые сценарии должны регулярно рецензироваться и
корректироваться,новые тесты должны быть разносторонними, чтобы охватить все компоненты программного обеспечения, или
системы, и найти как можно больше дефектов.

Принцип 6 – Тестирование зависит от контекста.
Тестирование выполняется по-разному в зависимости от контекста. Например, программное обеспечение, в котором критически
важна безопасность, тестируется иначе, чем сайт электронной коммерции.

Принцип 7 – Заблуждение об отсутствии ошибок.
Обнаружение и исправление дефектов не помогут, если созданная система не подходит пользователю и не удовлетворяет его
ожиданиям и потребностям (имеется ввиду, если багов в коде нет, еще не значит, что это именно тот код, который был нужен, так как возможно ошибочное ТЗ).

1.4 Основной процесс тестирования--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
