Selenium — это open-source проект, который предназначен главным образом для автоматизации тестирования веб-приложений.
Проект состоит из множества компонентов, как Selenium IDE, Grid, Server, WebDriver и т.д.

В данном курсе мы будем работать с Selenium WebDriver - интерфейсом взаимодействия клиентского кода (тестов) с браузером (через драйверы).
Данный инструмент позволяет писать тесты на любом ЯП (наиболее популярны для него Java и Python) под любой браузер при помощи драйвера, который разрабатывают под selenium 
разработчики браузера.

В итоге, написанные тесты, по большей части, универсальны, и подходят для любого браузера.
Таким образом, WebDriver признали стандартом протокола взаимодействия с браузером.

Для выполнения определенных действий на веб странице необходимо понимать ее структуру.
Элементы внутри страницы можно найти несколькими способами:
1. Поиск с помощью CSS-селекторов, когда путь к элементу описывается через синтаксис CSS. Селектор — это описание пути к элементу на странице.
2. Поиск с помощью указания значений тегов или атрибутов элементов: ID, class, и т.д.
3. Поиск с помощью языка запросов XPath.

Поиск с помощью css селекторов покрывает практически все возможные ситуации, и выглядит достаточно читабельным, поэтому он нас интересует в первую очередь.
Однако не редки случаи, когда другие способы в приоритете (css не умеет искать вверх, поэтому не подходит для поиска предков).

css селектор:
button {
  color:green;
}

html тэг:
<p>Текст</p>

Атрибуты тэгов:
Атрибут class - <div class="simple-text main">Здесь написан текст.</div>
У данного элемента имеется два класса, simple-text и main. Классы обычно используются для использования в css.

Атрибут name - <a name="top"></a>
Данный атрибут можно использовать в качестве якоря (закладки для перехода к нему через href="#top"), а также для поиска элемента.

Атрибут id - <button id="save_button">Сохранить</button>
Это уникальный указатель на элемент, в пределах страницы id не должны повторяться.

!Важно. В современных JavaScript-фреймворках id-атрибуты чаще всего генерируются динамически самим фреймворком, поэтому
они изменяются каждый раз при перезагрузке страницы и совершенно нечитабельны, например: вы увидите что-то вроде
id="u_ps_0_0_n" или id="avadspffd". В таких случаях вам придется пользоваться другими селекторами или использовать собственные
data-атрибуты, о которых мы расскажем далее. Названия классов также могут генерироваться автоматически. Поэтому предлагаем
вам простое правило: если увидите нечеловекочитаемое значение атрибута или если значение атрибута меняется при перезагрузке
страницы, то не используйте его.

data-атрибуты:
Это специальные атрибуты для тестов, которые не изменяются, как правило, начинаются с data-, и которые разработчик по договоренности может добавить.

Поиск элементов с помощью CSS селекторов.-----------------------------------------------------------------------------------------------------------------------------------------------
Части html страницы, по которым можно найти элемент:
id, tag, name, class, значение атрибута.

Поиск по id - если у элемента есть id, например, id="bullet", то для его поиска есть селектор #bullet, который можно ввести в поиске панели элемента (ctrl f), или в коде.

Поиск по tag - для такого поиска вводим сам тэг, например, h1, но это не очень удобно, так как обычно на странице множество одинаковых тэгов.

Поиск по значению атрибута - указываем атрибут и его значение в [] - [id="bullet"].

Поиск по name - это разновидность поиска по значению атрибута, и записывается также, но, естественноЮ атрибут тут name. Это довольно частый вид поиска, и в WebDriver выдеояется в отдельный вид.

Поиск по class - тоже разновидность поиска по значению атрибута и может записываться в [], но в таком случае, если у атрибута несколько классов, то надо писать их все в точном порядке,
иначе элемент не будет найден. Но мы можем писать упрощенно, так как это очень частоиспользуемый атрибут в css, написав значение атрибута и предварив его точкой .value
В таком виде ищется просто вхождение, поэтому можно указать только один из классов, или все в любом порядке вот так: .value1.value2
Однако стоит помнить, что такой поиск чувствителен к регистру, и .Value это уже другой класс.

Поиск с помощью составных CSS селекторов.-----------------------------------------------------------------------------------------------------------------------------------------------
